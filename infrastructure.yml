---
Parameters:
    LatestPackageVersion:
        Type: String
    PackageBucket:
        Type: String
    PackageKey:
        Type: String
    TellerAuth:
        Type: String
    EmailAddress:
        Type: String
    PropertyRefNo:
        Type: String

Outputs:
    DiffAlertLambdaFunctionArn:
        Value: !GetAtt ['DiffAlertLambdaFunction', 'Arn']

Resources:
    Bucket:
        Type: 'AWS::S3::Bucket'
        # Cicular dependency, having to setup notification manually
        # Properties:
        #     NotificationConfiguration:
        #         LambdaConfigurations:
        #             - Event: 's3:ObjectCreated:Put'
        #               Function: !GetAtt ['DiffAlertLambdaFunction', 'Arn']

    BucketPolicy:
        Type: 'AWS::S3::BucketPolicy'
        Properties:
            Bucket: !Ref Bucket
            PolicyDocument:
                Statement:
                    - Action: 's3:PutObject'
                      Effect: 'Allow'
                      Resource: !Join ['', ['arn:aws:s3:::', !Ref Bucket, '/teller-responses/*']]
                      Principal:
                          AWS: !GetAtt ['DumpTellerResponseLambdaRole', 'Arn']
                    - Action: 's3:GetObject'
                      Effect: 'Allow'
                      Resource: !Join ['', ['arn:aws:s3:::', !Ref Bucket, '/*']]
                      Principal:
                          AWS: !GetAtt ['DiffAlertLambdaRole', 'Arn']
                    - Action: 's3:ListBucket'
                      Effect: 'Allow'
                      Resource: !Join ['', ['arn:aws:s3:::', !Ref Bucket]]
                      Principal:
                          AWS: !GetAtt ['DiffAlertLambdaRole', 'Arn']

    DumpTellerResponseLambdaRole:
        Type: 'AWS::IAM::Role'
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - 'lambda.amazonaws.com'
                      Action:
                          - 'sts:AssumeRole'
            ManagedPolicyArns:
                 - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
            Policies:
                - PolicyName: 'S3Access'
                  PolicyDocument:
                      Version: '2012-10-17'
                      Statement:
                          - Effect: 'Allow'
                            Action: 's3:PutObject'
                            Resource: !Join ['', ['arn:aws:s3:::', !Ref Bucket, '/teller-responses/*']]
                - PolicyName: 'SNSPublish'
                  PolicyDocument:
                      Version: '2012-10-17'
                      Statement:
                          - Effect: 'Allow'
                            Action: 'sns:Publish'
                            Resource: !Ref 'DeadLetterQueue'

    DumpTellerLambdaFunction:
        Type: 'AWS::Lambda::Function'
        Properties:
            Code:
                S3Bucket: !Ref PackageBucket
                S3Key: !Ref PackageKey
                S3ObjectVersion: !Ref LatestPackageVersion
            Description: 'Makes a couple reqeusts to the Teller API and dumps the responses to S3.'
            Environment:
                Variables:
                    AUTH: !Ref TellerAuth
                    BUCKET: !Ref Bucket
            Handler: 'src/dump-teller-responses.index'
            Role: !GetAtt ['DumpTellerResponseLambdaRole', 'Arn']
            Runtime: 'nodejs6.10'
            Timeout: 30
            DeadLetterConfig:
                TargetArn: !Ref 'DeadLetterQueue'

    BinAlertLambdaRole:
        Type: 'AWS::IAM::Role'
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - 'lambda.amazonaws.com'
                      Action:
                          - 'sts:AssumeRole'
            ManagedPolicyArns:
                 - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
            Policies:
                - PolicyName: 'SESSendEmail'
                  PolicyDocument:
                      Version: '2012-10-17'
                      Statement:
                          - Effect: 'Allow'
                            Action: 'ses:SendEmail'
                            Resource: '*'
                - PolicyName: 'SNSPublish'
                  PolicyDocument:
                      Version: '2012-10-17'
                      Statement:
                          - Effect: 'Allow'
                            Action: 'sns:Publish'
                            Resource: !Ref 'DeadLetterQueue'

    BinAlertLambdaFunction:
        Type: 'AWS::Lambda::Function'
        Properties:
            Code:
                S3Bucket: !Ref PackageBucket
                S3Key: !Ref PackageKey
                S3ObjectVersion: !Ref LatestPackageVersion
            Description: 'Sends what bins to take out'
            Environment:
                Variables:
                    EMAIL_ADDRESS: !Ref EmailAddress
                    PROPERTY_REF_NO: !Ref PropertyRefNo
            Handler: 'src/bin-alert.binAlert'
            Role: !GetAtt ['BinAlertLambdaRole', 'Arn']
            Runtime: 'nodejs6.10'
            Timeout: 30
            DeadLetterConfig:
                TargetArn: !Ref 'DeadLetterQueue'

    BinAlertLambdaFunctionPermission:
        Type: 'AWS::Lambda::Permission'
        Properties:
            Action: 'lambda:InvokeFunction'
            FunctionName: !GetAtt ['BinAlertLambdaFunction', 'Arn']
            Principal: 'events.amazonaws.com'
            SourceArn: !GetAtt BinAlertEventRule.Arn


    BinAlertEventRule:
        Type: 'AWS::Events::Rule'
        Properties:
            ScheduleExpression: 'cron(0 18 ? * TUE *)'
            Targets:
                - Arn: !GetAtt ['BinAlertLambdaFunction', 'Arn']
                  Id: 'BinAlertLambdaFunction'

    DiffAlertLambdaRole:
        Type: 'AWS::IAM::Role'
        Properties:
            AssumeRolePolicyDocument:
                Version: '2012-10-17'
                Statement:
                    - Effect: Allow
                      Principal:
                          Service:
                              - 'lambda.amazonaws.com'
                      Action:
                          - 'sts:AssumeRole'
            ManagedPolicyArns:
                 - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
            Policies:
                - PolicyName: 'S3GetObject'
                  PolicyDocument:
                      Version: '2012-10-17'
                      Statement:
                          - Effect: 'Allow'
                            Action: 's3:GetObject'
                            Resource: !Join ['', ['arn:aws:s3:::', !Ref Bucket, '/*']]
                - PolicyName: 'S3ListBucket'
                  PolicyDocument:
                      Version: '2012-10-17'
                      Statement:
                          - Effect: 'Allow'
                            Action: 's3:ListBucket'
                            Resource: !Join ['', ['arn:aws:s3:::', !Ref Bucket]]
                - PolicyName: 'SESSendEmail'
                  PolicyDocument:
                      Version: '2012-10-17'
                      Statement:
                          - Effect: 'Allow'
                            Action: 'ses:SendEmail'
                            Resource: '*'
                - PolicyName: 'SNSPublish'
                  PolicyDocument:
                      Version: '2012-10-17'
                      Statement:
                          - Effect: 'Allow'
                            Action: 'sns:Publish'
                            Resource: !Ref 'DeadLetterQueue'

    DiffAlertLambdaFunction:
        Type: 'AWS::Lambda::Function'
        Properties:
            Code:
                S3Bucket: !Ref PackageBucket
                S3Key: !Ref PackageKey
                S3ObjectVersion: !Ref LatestPackageVersion
            Description: 'Diffs a new S3 object against an older one, and alerts if there is a difference.'
            Environment:
                Variables:
                    EMAIL_ADDRESS: !Ref EmailAddress
            Handler: 'src/router.diffAlert'
            Role: !GetAtt ['DiffAlertLambdaRole', 'Arn']
            Runtime: 'nodejs6.10'
            Timeout: 30
            DeadLetterConfig:
                TargetArn: !Ref 'DeadLetterQueue'

    DeadLetterQueue:
        Type: 'AWS::SNS::Topic'
        Properties:
            Subscription:
                - Endpoint: !Ref EmailAddress
                  Protocol: 'email'
